Comando compose con tutti i servizi:
docker-compose -f docker-compose-infrastructure.yml -f docker-compose-hex-service.yml -f docker-compose-rgb-service.yml -f docker-compose-hsl-service.yml -f docker-compose-cmyk-service.yml up -d

da eseguire nella radice del progetto ovvero

ttf-devops-2019\esercizi\microservices\

docker-compose-infrastructure.yml contiene il reverse proxy
gli altri file hanno formato

docker-compose-<nome-servizio>.yml 

e contengono quel servizio.

Sono stati separati i vari servizi in vari file in modo da poter decidere quali conversioni implementare.

I servizi sono così strutturati. 
Nelle parentesi è il nome dell'endpoint per quella funzionalità
hex-service:
	- HEX -> RGB (hexToRGB)
	- HEX -> HSL (hexToHSL)
	- HEX -> CMYK (hexToCMYK)

rgb-service:
	- RGB -> HEX (rgbToHEX)
	- RGB -> HSL (rgbToHSL)
	- RGB -> CMYK (rgbToCMYK)

hsl-service:
	- HSL -> HEX (hslToHEX)
	- HSL -> RGB (hslToRGB)
	- HSL -> CMYK (hslToCMYK)

cmyk-service:
	- CMYK -> HEX (cmykToHEX)
	- CMYK -> RGB (cmykToRGB)
	- CMYK -> HSL (cmykToHSL)

Una volta fatto il compose, le chiamate rest sono disponibili agli indirizzi col formato

vagrantbox.local/<nome-servizio>/<funzione>?color=<colore>

ad esempio

vagrantbox.local/cmyk-service/cmykToRGB?color={"cyan":0,"magenta":100,"yellow":75,"black":0}

